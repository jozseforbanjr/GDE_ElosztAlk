___________________________________________________
| Ver 1: A játék program előkészítése, Karakterek |
---------------------------------------------------

A feladatban megadottak:
Karakterek (öröklődés innen): Harcos és Varázsló
közös tulajdonságok (Karakterek osztályban definiálva):
- van életerejük (int)
- van pozíciójuk (valamilyen paraméter), int-et választottam, 3 értékű lehet (lásd Játéktér leírás, feladat alapján)
- tudnak lépni (mozogni a Játéktérben)
- tudnak harcolni (sebezni) -> kifejtés lejjebb
- (ráadás: gyorsaság, később jelentős lehet a melyik karakter cselekszik előbb kérdésnél, nem alapfeladat)

Megjegyzés:
- az extends kódban való használata miatt a 2 karakter egyedi tulajdonságokat kapott
V: mannapont (varázserő) - nincs felhasználva (felhasználási opciók később, nem az alap szoftver részeként)
H: erő - nincs felhasználva (felhasználási opciók később, nem az alap szoftver részeként)

d6: 6 oldalú dobókocka; 1-6 közötti (random) értékkel
életerő d6+3: a kockadobás eredménye +3, azaz [4-9] értéktartomány (random)

____________________________________
| Ver 2: játéktér kidolgozása (JT) |
------------------------------------

H_V: Harcos, továbbiakban H (1-es pozícióban), egy "térköz" (itt aláhúzás), Varázsló, továbbiakban V a 3-as pozícióban
X__: H és V azonos pozícióban (itt egyes), harcolnak -> életerő változik (lejjebb kifejtve)

kiírandó információk
H_V --> H:7, V:8
VH_ --> H:7, V:8
X__ --> harc: H:5, V:4

A 2. sorban V és H helyet cserélt. Ez többféleképpen lehetséges, de leginkább véletlenszerű (random) pozíció felvétellel.
Megjegyzés: realisztikusabb megoldást választottam:
1) a két fél a Játéktér (JT) két szélén helyezkedik el kiinduláskor és
2) első esetben csak egymás felé mozdulhatnak, egyébként pedig jobbra és balra is
3) mégpedig azért mert nem léphetnek ki a JT-ből, azaz a JT szélén a kifele lépés nem jön létre (a helyén marad)
4) a lépés mérete csak 1 mező lehet, azaz 0: nem lép és 1: 1 mezőt lép értékű lehet (random)
5) a lépés iránya (jobb/bal) alapesetben randomra lett állítva, ahol a lépés mérete jobbra: +, balra: - előjelet kap
6) a végleges lépés a lépésméret (rand[0,1]) és a lépésirány (rand[-,+], azaz -1, vagy +1) szorzatával jön létre
7) a kértnek megfelelően azonos pozícióban (mezőn) állás esetén H és V harcol -> életerő változik (lejjebb kifejtve)

Játéktér (JT):
1) a kiírás során "|" jellel jelölöm a JT szélét (fal); 2 pozíció [1,5], Karakter számára nem elérhető)
2) Karakterek által elfoglalható pozíciók/mezők száma: 3 [2,3,4]
3) a mezőn, amin nem áll semelyik karakter " " (szóköz) jelöli (a "_" helyett, hogy kevésbé legyen zavaró)
megjelenítés:
Igazából 5 mező, amiből a két szél mindig a "|" karakter, a közbülsők a karakterek pozíciójától függnek
4) A Harcos pozícióját a "H" jelöli, a Varázslóét a "V", azonos pozíciónál "X" (= harc)
5) Fal mellett csak "befele" lehet lépni, beljebb, viszont mindkét irányban (random)

_________________________________________________________
| Ver 3: Játék: mozgás a játéktérben és harc a játékban |
---------------------------------------------------------

Játék:
1) körökből áll
- 1 adott körben mindkét játékos egyszerre léphet (lép, vagy nem)
- az állás kiíratása megfelelő késleltetéssel történik az olvashatóság érdekében:
- a szükséges adatok a Karakterek pozíciója és életereje (É)
- azonos pozíció esetén "X"-et írunk ki és Harc alakul ki (lásd lejjebb)
- feladatban random pozíciók vannak, az én verziómban H és V (minden futás) első körében fix pozícióról indul:
H:2, V:4

kiírandó információk
H_V --> H:7, V:8
VH_ --> H:7, V:8
X__ --> harc: H:5, V:4

Megjegyzés: a Játék elején (@override implementáció tervezett használata miatt)
a Krakterek tulajdonságait kiírja a program.

Harc
- feltétele, hogy mindkét karakter a 3 elemű JT azonos pozícióján áll
- nincs további megkötés, hanem a fenti esetben mindkét fél támad és sebez
- az egyik sebzése a másikra hat
- mindkét karakter d6 sebzésű
- Megjegyzés: alapértelmezetten a két karakter eltávolodhat egymástól
(lásd a mozgás random jellege)
- Feltételezés 1: az életerő (É) nem lehet kisebb, mint nulla (ver 1-ben implementálva)
- Feltételezés 2: nincs meghatározva, hogy mennyi ideig tart a harc,
de feltételezhetően az egyik fél életerejének 0-ra csökkenéséig.
- Feltételezés 3: nincs a feladatban, de kiírja a győztes nevét / döntetlen jellegét

Program futási megjegyzés:
A karakterek random mozgása miatt a játék minimum 2, és
maximum nélküli módon bármilyen számú körből állhat.
Érdemes egy "harcra koncentráló"/"begőzölt" módot létrehozni, amikor
(legalább az egyik) játékos nem távolodhat (lépésméret 1, vagy 0 is lehet!) a másiktól.

_______________________________________________________
| Ver 4: Konstruktor híváslánc és @Override használat |
-------------------------------------------------------

Programozási megjegyzés 1: *** Konstruktor híváslánc létrehozás ***
Konstruktor lánc létrehozása "biztonsági okokból" / bemutató jelleggel.
Egyébként szükségtelen, mert a program konkrét értékekkel tölti fel a Karakterek tulajdonságait.
Tesztelések (még kommentelve bent maradnak):
a konstruktor láncba dinamikus tartalom (random karakternév),
vagy a létrehozandó Karakter (V / H) típusa szerinti "tárgy" objektum feltöltés... nem lehetséges, mert
- ha a konstruktor még nem futott le, akkor nincs az obj-nak azonosítója (hashcode), illetve
- a this() konstruktor hívásban függvény visszaadott értéke nem adható meg (pl. tárgy, mint String)

A próbálkozásokat kikommentelve benne hagytam ebben a verzióban.
Többek között konstruktor lánc tesztelését később érdemes implementálni. (tesztelés nem része a feladatnak)

Programozási megjegyzés 2: *** @Override használat ***
Karakter.kiir() refaktorálva egy .toString metódus felülírás (@Override) kódban való használata / implementálása céljából

+ program_info fájl létrehozása (ez a fájl)

_____________________________________________________
| Ver 5: Program Info pontosítás, verziók definiálása |
------------------------------------------------------

Ez az info fájl a Megrendelővel való egyeztetésre szolgál(hatna):
Folyamatok haladása, saját meggondolások dokumentálása, ...

A fájl tartalma pontosításra került.
Az alapfeladat teljes.

_______________________________________________________
| Ver 6: Interfész használata + Polimorfizmus, Öröklődés |
-------------------------------------------------------
1) Interfész: a Karakterek közös tulajdonságait a KarakterCselekvesek (jobb nem jutott eszembe) interfészben adtam meg.
A Karakter valósítja meg (implements) a megadott tulajdonságokat, amiket aztán (már az első verziótól fogva) a Harcos és Varázsló osztály örököl.

2) A Polimorfizmus két módszere: Túlterhelés / Felülírás
A) Túlterhelés
A Harcos és a Varázsló osztály vegKiiras() metódusánál, (String), vagy (String, int) paraméterekkel -> eltér a kiírt szöveg.
Nem a legértelmesebb metódus túlterhelési példa, de működik.

B) Felülírás:
- Megvalósítva az Object.toString() metódus felülírásával (Karakter / Harcos / Varazslo osztályokban egyaránt).
- A Karakter.kiir() metódus felülírása a Harcos és Varazslo osztályokban

Tanulság: Felülírt (@Override) metódust nem lehet túlterehelni (kétféleképpen felülírni a metódust)!

Megjegyzés: Java javaslat alapján  a println-eknél a .toString() nem szükséges.
Javítottam, következő verzióban a kommenteket kiszedem.
